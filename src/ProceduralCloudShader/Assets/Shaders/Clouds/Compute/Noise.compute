#pragma kernel CSMain

RWTexture3D<float4> Result;

StructuredBuffer<int> permutation;

float3 _PerlinScale;
float3 _PerlinOffset;
int    _PerlinOctaves;
float  _PerlinPersistance;
float  _PerlinFrequency;
float  _PerlinAmplitude;
float  _PerlinMin;
float  _PerlinMax;
float  _PerlinBoost;
float  _PerlinDensityThreshold;
float  _PerlinDensityMultiplier;

float3 _VoronoiScale;
float3 _VoronoiOffset;
int    _VoronoiOctaves;
float  _VoronoiPersistance;
float  _VoronoiFrequency;
float  _VoronoiAmplitude;
float  _VoronoiMin;
float  _VoronoiMax;
float  _VoronoiBoost;
float  _VoronoiDensityThreshold;
float  _VoronoiDensityMultiplier;

float fract(float x) {
    return x - floor(x);
}

float gradientDotV(uint hash, float x, float y, float z) {
    switch (hash & 15) { 
        case  0: return  x + y;
        case  1: return -x + y;
        case  2: return  x - y;
        case  3: return -x - y;
        case  4: return  x + z;
        case  5: return -x + z;
        case  6: return  x - z;
        case  7: return -x - z;
        case  8: return  y + z;
        case  9: return -y + z;
        case 10: return  y - z;
        case 11: return -y - z;
        case 12: return  y + x;
        case 13: return -x + y;
        case 14: return -y + z;
        case 15: return -y - z;
    } 
    return 0;
}

float fade(float t) { 
    return t * t * t * (t * (t * 6 - 15) + 10);
}

uint hash(int x, int y, int z)
{
    return permutation[permutation[permutation[x] + y] + z];
}

float perlin(float3 p) {

    int xi0 = ((int)floor(p.x)) & 255; 
    int yi0 = ((int)floor(p.y)) & 255; 
    int zi0 = ((int)floor(p.z)) & 255; 
    
    int xi1 = (xi0 + 1) & 255; 
    int yi1 = (yi0 + 1) & 255; 
    int zi1 = (zi0 + 1) & 255; 
    
    float tx = p.x - ((int)floor(p.x)); 
    float ty = p.y - ((int)floor(p.y)); 
    float tz = p.z - ((int)floor(p.z)); 
    
    float u = fade(tx); 
    float v = fade(ty); 
    float w = fade(tz); 

    float x0 = tx, x1 = tx - 1; 
    float y0 = ty, y1 = ty - 1; 
    float z0 = tz, z1 = tz - 1; 
    
    float a = gradientDotV(hash(xi0, yi0, zi0), x0, y0, z0); 
    float b = gradientDotV(hash(xi1, yi0, zi0), x1, y0, z0); 
    float c = gradientDotV(hash(xi0, yi1, zi0), x0, y1, z0); 
    float d = gradientDotV(hash(xi1, yi1, zi0), x1, y1, z0); 
    float e = gradientDotV(hash(xi0, yi0, zi1), x0, y0, z1); 
    float f = gradientDotV(hash(xi1, yi0, zi1), x1, y0, z1); 
    float g = gradientDotV(hash(xi0, yi1, zi1), x0, y1, z1); 
    float h = gradientDotV(hash(xi1, yi1, zi1), x1, y1, z1); 

    float du = fade(tx); 
    float dv = fade(ty); 
    float dw = fade(tz); 
    
    float k0 = a; 
    float k1 = (b - a); 
    float k2 = (c - a); 
    float k3 = (e - a); 
    float k4 = (a + d - b - c); 
    float k5 = (a + f - b - e); 
    float k6 = (a + g - c - e); 
    float k7 = (b + c + e + h - a - d - f - g);
    
    return k0 + k1 * u + k2 * v + k3 * w + k4 * u * v + k5 * u * w + k6 * v * w + k7 * u * v * w; 
} 

float3 random3d3d(float3 co) {
    return float3(
    fract(sin(dot(co, float3(12.989, 78.233, 37.719))) * 43758.5453123),
    fract(sin(dot(co, float3(39.346, 11.135, 83.155))) * 14375.8545346),
    fract(sin(dot(co, float3(73.156, 52.235, 09.151))) * 31396.2234116));
}

float2 randomSeed(float2 s) {
    if (s.x == 0 && s.y == 0) return float2(0.3, 0.2);
    if (s.x == 1 && s.y == 0) return float2(0.4, 0.8);
    if (s.x == 2 && s.y == 0) return float2(0.7, 0.1);
    if (s.x == 0 && s.y == 1) return float2(0.4, 0.6);
    if (s.x == 1 && s.y == 1) return float2(0.6, 0.5);
    if (s.x == 2 && s.y == 1) return float2(0.4, 0.1);
    if (s.x == 0 && s.y == 2) return float2(0.1, 0.7);
    if (s.x == 1 && s.y == 2) return float2(0.7, 0.2);
    if (s.x == 2 && s.y == 2) return float2(0.9, 0.4);
    return float2(0,0);
}

float voronoi(float3 p) {
    float3 i = floor(p);

    float3 cell, seed;
    float d;
    float dMin = 100;

    for(int x=-1; x<=1; x++){
        for(int y=-1; y<=1; y++){
            for(int z=-1; z<=1; z++){
                cell = i + float3(x, y, z);
                seed = cell + random3d3d(cell);
                d = length(seed - p);
                if (d < dMin) {
                    dMin = d;
                }
            }
        }
    }
    
    return dMin;
}


float getColorVoronoi(float3 co, int octaves, float persistence) {
    float lacunarity = 2.0;
    float frequency = _VoronoiFrequency;
    float amplitude = _VoronoiAmplitude;
    float current, total, maxValue = 0;

    for(int i=0; i < octaves; i++) {
        current = voronoi(co * frequency) * amplitude;
        total += current;
        maxValue += amplitude;
        
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    return 1-total/maxValue;
}

float getColorPerlin(float3 co, int octaves, float persistence) {
    float lacunarity = 2.0;
    float frequency = _PerlinFrequency;
    float amplitude = _PerlinAmplitude;
    float current, total, maxValue = 0;

    for(int i=0; i < octaves; i++) {
        current = perlin(co * frequency) * amplitude;
        total += current;
        maxValue += amplitude;
        
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    return total/maxValue;
}


[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // float3 voronoiPosition = id.xyz * _VoronoiScale + _VoronoiOffset;
    // float3 perlinPosition = id.xyz * _PerlinScale + _PerlinOffset;
    // float voronoiDensity = smoothstep(_VoronoiMin, _VoronoiMax, getColorVoronoi(voronoiPosition, _VoronoiOctaves, _VoronoiPersistance)) + _VoronoiBoost;
    // float perlinDensity = smoothstep(_PerlinMin, _PerlinMax, getColorPerlin(perlinPosition, _PerlinOctaves, _PerlinPersistance)) + _PerlinBoost;

    // voronoiDensity = max(0, voronoiDensity - _VoronoiDensityThreshold) * _VoronoiDensityMultiplier;
    // perlinDensity = max(0, perlinDensity - _PerlinDensityThreshold) * _PerlinDensityMultiplier;

    // float density = voronoiDensity * perlinDensity * 2;
    Result[id.xyz] = float4(1,1,1,1);
}